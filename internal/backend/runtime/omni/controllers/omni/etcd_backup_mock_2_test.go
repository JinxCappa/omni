// Copyright (c) 2025 Sidero Labs, Inc.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/siderolabs/omni/internal/backend/runtime/omni/controllers/omni/etcdbackup/store (interfaces: Factory)
//
// Generated by this command:
//
//	mockgen -destination=etcd_backup_mock_2_test.go -package omni_test -typed -copyright_file ../../../../../../hack/.license-header.go.txt github.com/siderolabs/omni/internal/backend/runtime/omni/controllers/omni/etcdbackup/store Factory
//

// Package omni_test is a generated GoMock package.
package omni_test

import (
	context "context"
	reflect "reflect"

	state "github.com/cosi-project/runtime/pkg/state"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"

	etcdbackup "github.com/siderolabs/omni/internal/backend/runtime/omni/controllers/omni/etcdbackup"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockFactory) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockFactoryMockRecorder) Description() *MockFactoryDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockFactory)(nil).Description))
	return &MockFactoryDescriptionCall{Call: call}
}

// MockFactoryDescriptionCall wrap *gomock.Call
type MockFactoryDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryDescriptionCall) Return(arg0 string) *MockFactoryDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryDescriptionCall) Do(f func() string) *MockFactoryDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryDescriptionCall) DoAndReturn(f func() string) *MockFactoryDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStore mocks base method.
func (m *MockFactory) GetStore() (etcdbackup.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(etcdbackup.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStore indicates an expected call of GetStore.
func (mr *MockFactoryMockRecorder) GetStore() *MockFactoryGetStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockFactory)(nil).GetStore))
	return &MockFactoryGetStoreCall{Call: call}
}

// MockFactoryGetStoreCall wrap *gomock.Call
type MockFactoryGetStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetStoreCall) Return(arg0 etcdbackup.Store, arg1 error) *MockFactoryGetStoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetStoreCall) Do(f func() (etcdbackup.Store, error)) *MockFactoryGetStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetStoreCall) DoAndReturn(f func() (etcdbackup.Store, error)) *MockFactoryGetStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetThroughputs mocks base method.
func (m *MockFactory) SetThroughputs(up, down uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThroughputs", up, down)
}

// SetThroughputs indicates an expected call of SetThroughputs.
func (mr *MockFactoryMockRecorder) SetThroughputs(up, down any) *MockFactorySetThroughputsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThroughputs", reflect.TypeOf((*MockFactory)(nil).SetThroughputs), up, down)
	return &MockFactorySetThroughputsCall{Call: call}
}

// MockFactorySetThroughputsCall wrap *gomock.Call
type MockFactorySetThroughputsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactorySetThroughputsCall) Return() *MockFactorySetThroughputsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactorySetThroughputsCall) Do(f func(uint64, uint64)) *MockFactorySetThroughputsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactorySetThroughputsCall) DoAndReturn(f func(uint64, uint64)) *MockFactorySetThroughputsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockFactory) Start(arg0 context.Context, arg1 state.State, arg2 *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockFactoryMockRecorder) Start(arg0, arg1, arg2 any) *MockFactoryStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFactory)(nil).Start), arg0, arg1, arg2)
	return &MockFactoryStartCall{Call: call}
}

// MockFactoryStartCall wrap *gomock.Call
type MockFactoryStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryStartCall) Return(arg0 error) *MockFactoryStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryStartCall) Do(f func(context.Context, state.State, *zap.Logger) error) *MockFactoryStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryStartCall) DoAndReturn(f func(context.Context, state.State, *zap.Logger) error) *MockFactoryStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
